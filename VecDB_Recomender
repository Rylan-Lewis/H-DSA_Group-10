{"cells":[{"cell_type":"code","execution_count":9,"metadata":{"id":"aIptYprXD5mr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742381692916,"user_tz":-330,"elapsed":3919,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"676afa0e-5533-4654-f6ea-69247309bed5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ex4ZqTlwEX8M"},"outputs":[],"source":["import os\n","os.chdir('drive/MyDrive/Partnr/')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u2PRLWucEfcm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742379794259,"user_tz":-330,"elapsed":12527,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"186a103b-ab41-4dac-89f8-3d526cf768a0"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/232.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━\u001b[0m \u001b[32m225.3/232.6 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m232.6/232.6 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.0/3.0 MB\u001b[0m \u001b[31m38.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.6/139.6 kB\u001b[0m \u001b[31m12.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m244.3/244.3 kB\u001b[0m \u001b[31m21.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.4/13.4 MB\u001b[0m \u001b[31m76.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.4/84.4 kB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}],"source":["!pip install -q -r common/requirements.txt"]},{"cell_type":"code","source":["from dotenv import load_dotenv\n","load_dotenv(dotenv_path='/content/drive/MyDrive/Partnr/recommender/.env')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZmcyTWKsQnze","executionInfo":{"status":"ok","timestamp":1742379805274,"user_tz":-330,"elapsed":492,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"91f792cb-0bc5-450a-dbd8-c04c4ea0fc1f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","execution_count":39,"metadata":{"id":"wu8kT_cOGJa2","executionInfo":{"status":"ok","timestamp":1742382553418,"user_tz":-330,"elapsed":2,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"outputs":[],"source":["from common.db import create_db_connection\n","\n","def fetch_candidates():\n","    conn = create_db_connection()\n","    cursor = conn.cursor()\n","    cursor.execute('SELECT * FROM public.skillgraphs')\n","    candidates = cursor.fetchall()\n","    cursor.close()\n","    conn.close()\n","    return candidates"]},{"cell_type":"code","source":["skillgraphs = {candidate[0] : candidate[1] for candidate in fetch_candidates()}"],"metadata":{"id":"ILQ7KuKRUjQL","executionInfo":{"status":"ok","timestamp":1742382557468,"user_tz":-330,"elapsed":1217,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["from tqdm import tqdm\n","from common.utils import get_resume_data\n","\n","for talentid, skillgraph in tqdm(skillgraphs.items()):\n","    try:\n","        resumeUrl = skillgraph['talent']['resumeUrl']\n","        skillgraphs[talentid]['resume'] = get_resume_data(resumeUrl)\n","    except:\n","        print(talentid, skillgraph)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YUGZaSqfLELO","outputId":"c64cffb1-612d-405e-ccdd-56e5ab8ed8e7","executionInfo":{"status":"ok","timestamp":1742381966722,"user_tz":-330,"elapsed":256740,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 98/98 [04:16<00:00,  2.62s/it]\n"]}]},{"cell_type":"code","source":["len(skillgraphs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qvu0xNwlUjsX","executionInfo":{"status":"ok","timestamp":1742382009623,"user_tz":-330,"elapsed":52,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"6547ead2-66ab-4b0b-8b4e-3894a9304fba"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["98"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["ChromaDB + Langchain\n"],"metadata":{"id":"jCWtH1opVLCp"}},{"cell_type":"code","source":["!pip install -q --upgrade -r recommender/requirements.txt"],"metadata":{"id":"dNFn2RLKUlVr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742382052147,"user_tz":-330,"elapsed":40573,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"332d4559-3fd1-45af-b7cc-b7b9ec39afcf"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/67.3 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.3/67.3 kB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.0/42.0 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m611.1/611.1 kB\u001b[0m \u001b[31m12.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.4/2.4 MB\u001b[0m \u001b[31m42.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m302.3/302.3 kB\u001b[0m \u001b[31m23.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.5/2.5 MB\u001b[0m \u001b[31m64.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m284.2/284.2 kB\u001b[0m \u001b[31m22.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m94.9/94.9 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m68.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m46.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m101.6/101.6 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m54.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.0/16.0 MB\u001b[0m \u001b[31m57.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m55.9/55.9 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.6/79.6 kB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m319.7/319.7 kB\u001b[0m \u001b[31m24.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.3/62.3 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m459.8/459.8 kB\u001b[0m \u001b[31m27.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.9/50.9 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.0/4.0 MB\u001b[0m \u001b[31m51.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m452.6/452.6 kB\u001b[0m \u001b[31m25.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.8/86.8 kB\u001b[0m \u001b[31m7.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Building wheel for pypika (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n"]}]},{"cell_type":"code","source":["from langchain_google_genai import GoogleGenerativeAIEmbeddings\n","\n","embeddings = GoogleGenerativeAIEmbeddings(model=\"models/embedding-001\",google_api_key=os.environ.get('GOOGLE_API_KEY'))"],"metadata":{"id":"1ZvMxsopUrYC","executionInfo":{"status":"ok","timestamp":1742382070241,"user_tz":-330,"elapsed":11319,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["from langchain.text_splitter import RecursiveCharacterTextSplitter\n","from langchain.schema.document import Document\n","from uuid import uuid4"],"metadata":{"id":"6fNxvEHjU--z","executionInfo":{"status":"ok","timestamp":1742382070259,"user_tz":-330,"elapsed":19,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["text_splitter = RecursiveCharacterTextSplitter(chunk_size=5000, chunk_overlap=500)"],"metadata":{"id":"XTawLDjIUqzZ","executionInfo":{"status":"ok","timestamp":1742382072192,"user_tz":-330,"elapsed":3,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["split_docs = []\n","for talentid, skillgraph in skillgraphs.items():\n","    chunks = text_splitter.split_text(str(skillgraph))\n","    for chunk in chunks:\n","        split_docs.append(Document(page_content=chunk, metadata={\"talentid\": talentid}, id=uuid4()))"],"metadata":{"id":"ndcwP-XWUphc","executionInfo":{"status":"ok","timestamp":1742382084921,"user_tz":-330,"elapsed":202,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["len(split_docs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4tkLKtvgFIwi","executionInfo":{"status":"ok","timestamp":1742382088193,"user_tz":-330,"elapsed":29,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"9b3559fa-bbc3-4f0d-f43d-b58dbb664b1a"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["226"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# from langchain.schema.document import Document\n","\n","# split_docs = []\n","# for talentid, skillgraph in skillgraphs.items():\n","#     split_docs.append(Document(page_content=chunk, metadata={\"talentid\": talentid}, id=talentid))"],"metadata":{"id":"AEftFTJnxElt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i2TVGp_nJYnK"},"source":["Collection Based approach"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"OrXRbUIDJYnK","executionInfo":{"status":"ok","timestamp":1742382137356,"user_tz":-330,"elapsed":1735,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"outputs":[],"source":["from langchain_chroma import Chroma\n","\n","skillgraph_vectorstore = Chroma(\n","    collection_name=\"skillgraphs\",\n","    embedding_function=embeddings,\n","    persist_directory=\"./recommender/chromaDB/skillgraphs\",\n",")"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"6baCXAHuJYnK","executionInfo":{"status":"ok","timestamp":1742382154416,"user_tz":-330,"elapsed":15369,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"outputs":[],"source":["batch_size = 50\n","\n","for i in range(0, len(split_docs), batch_size):\n","    batch_docs = split_docs[i:i+batch_size]\n","    skillgraph_vectorstore.add_documents(batch_docs)"]},{"cell_type":"markdown","source":["Searching by JD"],"metadata":{"id":"xrt0A3KfPMba"}},{"cell_type":"code","source":["from common.db import fetch_job"],"metadata":{"id":"2p-oXZBEWqei","executionInfo":{"status":"ok","timestamp":1742382161702,"user_tz":-330,"elapsed":2,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["jd = fetch_job(71)\n","# jd='Senior Backend Java Developer'\n","fetch_k = 5"],"metadata":{"id":"16ANa5LLXkTe","executionInfo":{"status":"ok","timestamp":1742382164109,"user_tz":-330,"elapsed":628,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["from common.utils import my_jsonify, pretty_print\n","\n","pretty_print(jd)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qk12fjpB_XOm","executionInfo":{"status":"ok","timestamp":1742382165336,"user_tz":-330,"elapsed":15,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"57bca948-6a5a-49be-e13b-213878551168"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["{\n","    \"title\": \"Senior Product Manager\",\n","    \"location\": \"Remote\",\n","    \"category\": \"Product\",\n","    \"type\": \"Full-time\",\n","    \"modeOfWork\": \"Remote\",\n","    \"md\": \"#### Job Specifics:\\n\\nSpecializing in BTC Layer 2, infrastructure projects, supported by top-tier\\nengineering and operations teams, with backing from leading investors.\\n\\n#### Responsibilities:\\n\\nResponsible for designing innovative blockchain products and related product\\nplanning.\\n\\nFormulating product rules, growth models, and product KPIs.\\n\\nManaging and analyzing the full lifecycle of product requirements.\\n\\nEstablishing effective mechanisms for collecting and feedback on business and\\nuser requirements, leveraging data analysis and other channels to identify\\nissues and opportunities.\\n\\nWorking closely with upstream and downstream teams to drive product and\\nfeature implementation.\\n\\n#### Requirements:\\n\\nBachelor's degree or above, with at least 4 years of work experience,\\nincluding a minimum of 2 years in blockchain-related product roles, familiar\\nwith industry-leading products and trends.\\n\\nPossess a comprehensive understanding of internet product methodologies,\\nstrong learning and adaptability, and sensitivity to innovative products, and\\nuser needs.\\n\\nExcellent communication and driving skills, adept at breaking down complex\\nproblems, and proficiency in English is a plus.\\n\\nSuccessful product experience, capable of analyzing and evaluating product\\nopportunities, and independently planning product iteration paths.\\n\\nExperience working in platform-based Web3 enterprises/products is preferred.\\n\\n####\"\n","}\n"]}]},{"cell_type":"code","source":["from collections import OrderedDict\n","\n","def ordered_set(iterable):\n","    return list(OrderedDict.fromkeys(iterable))"],"metadata":{"id":"CYBNiVTvbmoH","executionInfo":{"status":"ok","timestamp":1742382207812,"user_tz":-330,"elapsed":22,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["from pydantic import BaseModel\n","\n","class VectorDoc(BaseModel):\n","    id: int\n","    score: float\n","\n","    # for sim score sorting\n","    def __lt__(self, other):\n","        return self.score < other.score\n","\n","    # for hash comparisons\n","    def __eq__(self, other):\n","        return isinstance(other, VectorDoc) and self.id == other.id\n","\n","    def __hash__(self):\n","        return hash(self.id)\n"],"metadata":{"id":"8aetcflmTzkH","executionInfo":{"status":"ok","timestamp":1742382219500,"user_tz":-330,"elapsed":3792,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["talents = []\n","k = fetch_k\n","while len(talents) < fetch_k:\n","    top_k = skillgraph_vectorstore.similarity_search_with_relevance_scores(str(jd), k=k)\n","    talents = ordered_set(VectorDoc(id=doc.metadata['talentid'], score=score) for [doc, score] in top_k)\n","    print(talents)\n","    k = k + (k >> 1) # Java Arraylist approach"],"metadata":{"id":"_2AB1af2XnMY","executionInfo":{"status":"ok","timestamp":1742382224838,"user_tz":-330,"elapsed":459,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3d4694ce-48ff-4994-d4d9-54dd3d8b9a0f"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["[VectorDoc(id=1210, score=0.6554278077964582), VectorDoc(id=52, score=0.6458273457615558), VectorDoc(id=958, score=0.6337873819879941)]\n","[VectorDoc(id=1210, score=0.6554278077964582), VectorDoc(id=52, score=0.6458273457615558), VectorDoc(id=958, score=0.6337873819879941), VectorDoc(id=1015, score=0.6327471977667453)]\n","[VectorDoc(id=1210, score=0.6554278077964582), VectorDoc(id=52, score=0.6458273457615558), VectorDoc(id=958, score=0.6337873819879941), VectorDoc(id=1015, score=0.6327471977667453)]\n","[VectorDoc(id=1210, score=0.6554278077964582), VectorDoc(id=52, score=0.6458273457615558), VectorDoc(id=958, score=0.6337873819879941), VectorDoc(id=1015, score=0.6327471977667453), VectorDoc(id=1017, score=0.6312492987706682)]\n"]}]},{"cell_type":"code","source":["talents.sort(reverse=True)\n","for talent in talents:\n","    print(talent.id)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2S4s6y5ZYAKb","executionInfo":{"status":"ok","timestamp":1742384057537,"user_tz":-330,"elapsed":5,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"8e1d3d6a-e229-4ebc-eec4-2587b90f6319"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["1210\n","52\n","958\n","1015\n","1017\n"]}]},{"cell_type":"code","source":["resume_url = skillgraphs[1210]['talent']['resumeUrl']\n","resume_text = get_resume_data(resume_url)"],"metadata":{"id":"FL4edmmB_zXN","executionInfo":{"status":"ok","timestamp":1742384069124,"user_tz":-330,"elapsed":2548,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["resume_text"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":123},"id":"0mPMCksLHWhY","executionInfo":{"status":"ok","timestamp":1742382922504,"user_tz":-330,"elapsed":26,"user":{"displayName":"Kedar Kulkarni","userId":"12469777613946983044"}},"outputId":"e713f003-2ccd-49b8-e44e-42ba050938b7"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'SASWATA PATRASUMMARYI am a software developer specialising in Blockchain with robust problem-solving skills and provenexperience in the subsequent fields. I am also a part-time trainer, which exhibits my oratory skillsand my ability to verbalise my thoughts clearly.WORK EXPERIENCEKolkata, West Bengal • saswatapatra15@gmail.comhttps://www.linkedin.com/in/saswata-patra-0111111a5/L e a d  B l o c k c h a i n  D e v e l o p e r  -  N e x Q l o u d  t e c h n o l o g i e sD e c  2 0 2 4  -  P r e s e n tDealt with a highly critical problem where the internal data structure of forked blockchainEVMOS had an unstable state due to the IAVL tree data structure. Made custom db migrationsin a live chain which had corrupted side chains created due to bad infrastructure. Had to dig deep into open-source projects and make a document regarding what could be abetter state db to have for the business requirement. For that i had to scan through thechangelogs and issues raised and find out the number of breaking changes and then determinea stable version to migrate to.Made custom changes in the consensus layer like velocity management and blacklisting wallets.Conducted a thorough security audit of the blockchain and prevented a loss of $200,000.Implemented AWS KMS and hashicorp signing along with multi-sig Gnosis-safe wallets for dailypayouts and for circulating and non-circulating supply.Created a custom test network by replaying over 2 lakh transactions using batch processing,fallback RPC’s and custom retry logic to make it 4.5 times faster than traditional replay oftransactions.Scaling up the blockchain payout infrastructure using batch transfer for native coins and usingfallback rpc URL’s logic by bypassing using a technique similar to consistent hashing.Created Go bindings for the smart contracts so created so that the consensus layer caninteract with the blockchain layer.Enabled governance mechanism so that upgrades can happen gracefully at a specified block-height.D i r e c t o r  -  C a p r i c o n  t e h c n o l o g y 2 0 1 9  -  P r e s e n tLeadership and Team Management:Lead a team of 20 full-time employees with a 100% retention rate, fostering a culture ofsatisfaction and professional growth.Client Relations and Project Delivery:Serve as the primary point of contact and delivery manager for all client engagements.Successfully managed 20+ clients and delivered 30+ projects with a 100% client retention rate.Strategic Planning and Business Analysis:Formulate and oversee comprehensive business analysis plans to align with organizationalgoals.Marketing and Sales Oversight:Direct and guide the marketing and sales teams to ensure consistent growth and successfulclient acquisition.Commitment to Excellence:Ensure seamless client experiences and cultivate a collaborative environment for innovationand sustained success.Directly dealt with client calls as a Point of Contact, understanding their requirements anddesigning the  architecture. Have been responsible for the delivery of 8+projects under 10months to production. Have delivered projects worth  approx. 2Cr (INR) in valuation.Have been responsible for taking interviews of candidates and forming a team from scratchwhich now consists of 10 members to whom i assign tasks, do resource allocation dependingupon the individual’s skills set and problem solving abilities.I have taken more than 200+interviews in webskitters itself.ArcD - Collaborated with a cross functional team consisting of 30+ members and lead a highpriority project. Won the performer of the month along with incentives inside three months andbecame one of the fastest team leads after joining in the company.Orchestrated full DAPP project: news scraping, summarisation with OpenAI, Vector DB search,smart contract development for reward system (Starc tokens), liquidity pool creation (Uniswapv3), trading rewards algorithm.Integrated staking/farming, trading, swapping functionalities.Polpick - Guided junior developers in building a betting platform akin to UpvsDown whichinvolved very high complexity of time management and scalability. The users had to bet in a 15second time slot and the number of users were in thousands. I have solved the problem ofscaling that ecosystem by using techniques like using a dedicated Node for the RPC, usingtechniques like queues and increasing the worker nodes to handle the load of transactions.Reactor chrome extension - Was responsible for even out of domain difficult projects likebuilding a very advanced chrome extension which is a chatbot like alexa and chatgpt with oneof a kind features.The extension includes features like “reply with reactor” in gmail wherepeople could have a reply button injected in the gmail page. The extension is capable ofsummarizing any webpage on which it is opened and give answers to the queries based on thatwebpage. I have done the complete end to end development from the frontend side. I was alsoresponsible for the deployment of the extension on chrome webstore.JackCoins - Iam also working on a project in Solana using Anchor framework also Ton usingFunC. We are responsible for the complete end to end development of the project consisting ofdevelopment of 20+ smart contracts/programs on both Solana and Ton combined. T e a m  L e a d  S o f t w a r e  e n g i n e e r  -  B l o c k c h a i n  a t  W e b s k i t t e r s J a n  2 0 2 4  -  D e c  2 0 2 4T e c h n i c a l  T R A I N E R  EXCAIN LLP and Zestech Global J a n u a r y  2 0 2 3  -  D e c e m b e r  2 0 2 41+ year of teaching experience. Trained over 1000+ students.Graphic Era University students and AIT (Chikmagalur) students in the field of GoogleCloud, Blockchain, and Data Structure and Algorithms.Tailored training sessions based on individual learning styles and technical proficiency levelsto maximize participant engagement and comprehension.B A C K E N D  D E V E L O P E R  a t  T R I U N I T S  I N F O T E C H  P V T .  L T D ,  S e p t e m b e r  2 0 2 0  -  S e p t e m b e r  2 0 2 2Worked on a Multi-Level_marketing project, responsible for building the MLM tree structureon Tron blockchain Responsible for gamification of the project with TRU coin.Used python ask framework, Redis to cache queries in order to reduce latency. Blockchaintrainer at NIT Durgapur conducted by Triunits. Developed a blockchain from scratch along with a native token called - TRU coinPitched the products to different investors and raised 1Cr in capitalTrained 200+ NIT Durgapur students on blockchain workshopsEDUCATIONMCA in Computer Applications April 2021 - April 2023 Chandigarh University at Gharuan -PunjabCGPA - 7.83KEY SKILLSGolang,Python,Java javascript nodejs,Private blockchains,publicblockchains,Ethereum,Solana,EVMOSSolidity,Rust, Hardhat, smart contract auditing using slither, echidna, manticoreACCOMPLISHMENTSEmployee of the month April 2024 at webskittersVeta national debate February 2019national Debate 4th prize winer'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","source":["## Testing different chunk sizes"],"metadata":{"id":"J8F5VXeu9em4"}},{"cell_type":"code","source":["def create_vectorstore(size):\n","    vectorstore = Chroma(\n","        collection_name=str(size),\n","        embedding_function=embeddings,\n","        persist_directory=f\"./recommender/chromaDB/test/{str(size)}\",\n","    )\n","    return vectorstore"],"metadata":{"id":"Se5U73KQ-FZO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def load_vectorstore(vectorstore, docs, batch_size = 50):\n","    for i in range(0, len(docs), batch_size):\n","        batch_docs = docs[i:i+batch_size]\n","        vectorstore.add_documents(batch_docs)"],"metadata":{"id":"3J1dIZIx-7Cg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def split_and_load(vectorstore, text_splitter):\n","    split_docs = []\n","    for talentid, skillgraph in skillgraphs.items():\n","        chunks = text_splitter.split_text(str(skillgraph))\n","        for chunk in chunks:\n","            split_docs.append(Document(page_content=chunk, metadata={\"talentid\": talentid}, id=uuid4()))\n","    load_vectorstore(vectorstore, split_docs)"],"metadata":{"id":"uKlq1DvW_NvZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def query_vectorstore(jd, fetch_k):\n","    talents = []\n","    k = fetch_k\n","    while len(talents) < fetch_k:\n","        top_k = skillgraph_vectorstore.similarity_search_with_relevance_scores(str(jd), k=k)\n","        talents = ordered_set(VectorDoc(id=doc.metadata['talentid'], score=score) for [doc, score] in top_k)\n","        k = k + (k >> 1) # Java Arraylist approach\n","    return talents"],"metadata":{"id":"3KceqpJ4_3XP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def display_query_result(talents):\n","    for talent in talents:\n","        print(talent.id, skillgraphs[talent.id]['talent']['fullname'])"],"metadata":{"id":"ITHs53piAHyc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_collections = {size: {\n","                        'vectorstore': create_vectorstore(size),\n","                        'text_splitter': RecursiveCharacterTextSplitter(chunk_size=size, chunk_overlap=size/10)\n","                    } for size in [2000, 3000, 4000, 5000, 6000, 7000, 8000]}"],"metadata":{"id":"70eIvBqU9iZs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for size in tqdm(test_collections.keys()):\n","    vectorstore = test_collections[size]['vectorstore']\n","    text_splitter = test_collections[size]['text_splitter']\n","    split_and_load(vectorstore, text_splitter)"],"metadata":{"id":"KkhCpocUAhjm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#! RATE LIMIT PROBLEM"],"metadata":{"id":"AGKU6rf2C_S4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Reverse\n"],"metadata":{"id":"oLJLSVI9a7pM"}},{"cell_type":"markdown","source":["update vectorDB when talent updates skillgraph  \n","new jd -> new recommendations"],"metadata":{"id":"S34qqpqQ6JNk"}},{"cell_type":"code","source":["from common.db import fetch_job"],"metadata":{"id":"E-xTPzCDR_V4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def fetch_all_jobs():\n","    conn = create_db_connection()\n","    cursor = conn.cursor()\n","    cursor.execute('SELECT jobid, details, status FROM public.jobs ORDER BY jobid ASC ')\n","    jobs = cursor.fetchall()\n","    cursor.close()\n","    conn.close()\n","    return jobs"],"metadata":{"id":"SjWV4ROPU8gD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["jobs = fetch_all_jobs()"],"metadata":{"id":"JvOqwgbIW_62"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["jds = {}\n","for job in jobs:\n","    jobid = job[0]\n","    details = job[1]\n","    status = job[2]\n","    if status.lower() == 'open':\n","        jds[jobid] = details"],"metadata":{"id":"Nli03o6hXCcu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from langchain_chroma import Chroma\n","\n","jds_vectorstore = Chroma(\n","        collection_name='jds',\n","        embedding_function=embeddings,\n","        persist_directory=f\"./recommender/chromaDB/jds\",\n","    )"],"metadata":{"id":"-58mC312XkyR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["text_splitter = RecursiveCharacterTextSplitter(chunk_size=5000, chunk_overlap=500)"],"metadata":{"id":"Vj5OpnMJXeUT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["split_docs = []\n","for jobid, job_details in jds.items():\n","    # Without chunking\n","    split_docs.append(Document(page_content=str(job_details), metadata={\"jobid\": jobid}, id=uuid4()))"],"metadata":{"id":"uI5YYhMoX1rZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def load_vectorstore(vectorstore, docs, batch_size = 50):\n","    for i in range(0, len(docs), batch_size):\n","        batch_docs = docs[i:i+batch_size]\n","        vectorstore.add_documents(batch_docs)"],"metadata":{"id":"1N7W5zy0Y51n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["load_vectorstore(jds_vectorstore, split_docs)"],"metadata":{"id":"RQsO2LEFY-fV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from collections import OrderedDict\n","\n","def ordered_set(iterable):\n","    return list(OrderedDict.fromkeys(iterable))"],"metadata":{"id":"cVTtVJJyZ3HL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from pydantic import BaseModel\n","\n","class VectorDoc(BaseModel):\n","    id: int\n","    score: float\n","\n","    # for sim score sorting\n","    def __lt__(self, other):\n","        return self.score < other.score\n","\n","    # for hash comparisons\n","    def __eq__(self, other):\n","        return isinstance(other, VectorDoc) and self.id == other.id\n","\n","    def __hash__(self):\n","        return hash(self.id)"],"metadata":{"id":"-GjR5z6BZ3uh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def query_vectorstore(talent, fetch_k = 5):\n","    matching_jds = []\n","    k = fetch_k\n","    while len(matching_jds) < fetch_k:\n","        top_k = jds_vectorstore.similarity_search_with_relevance_scores(str(talent), k=k)\n","        matching_jds = ordered_set(VectorDoc(id=doc.metadata['jobid'], score=score) for [doc, score] in top_k)\n","        k = k + (k >> 1) # Java Arraylist approach\n","    return matching_jds"],"metadata":{"id":"Wi33WUl9ZDox"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["matching_jds = query_vectorstore(skillgraphs[955])"],"metadata":{"id":"kkF8F4NqZaRj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["matching_jds"],"metadata":{"id":"WQphm13iZtxr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for doc in matching_jds:\n","    print(jds[doc.id])"],"metadata":{"id":"XmjA3iKFZ8jD"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}